apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      securityContext:
        fsGroup: 1000 # Ensure this user/group owns the volume mount path
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongodb-pvc
      initContainers:
        # Keep fix-permissions if needed for volume ownership
        - name: fix-permissions
          image: busybox
          # Ensure /data/db is owned by the user/group the container runs as
          command: ["sh", "-c", "chown -R 1000:1000 /data/db && chmod -R 0700 /data/db"]
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
        # Removed the complex init-mongo container
      containers:
        - name: mongodb
          image: mongo:latest
          command: ["mongod", "--bind_ip_all", "--auth"]
          ports:
            - containerPort: 27017
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          env:
            # Added necessary env vars for standard MongoDB initialization
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-password
            - name: MONGO_INITDB_DATABASE # Still needed if you want this specific DB created initially
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-database
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000 # Must match fsGroup and chown user
            runAsGroup: 1000 # Must match fsGroup and chown group
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          livenessProbe:
            exec:
              # Use mongosh with connection string if auth is enabled and you aren't using default admin db
              # Or check if the ping command works with auth.
              # mongosh "mongodb://<user>:<password>@localhost:27017/admin" --eval "db.adminCommand('ping')"
              # For simplicity, let's stick to the basic ping assuming admin access via service account or similar,
              # or configure RBAC for liveness probe execution.
              # A simple ping is often sufficient for liveness/readiness.
              command: ["mongosh", "--eval", "db.adminCommand('ping')"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["mongosh", "--eval", "db.adminCommand('ping')"]
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

---
# Service for MongoDB (remains the same)
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  type: ClusterIP