apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      securityContext:
        fsGroup: 1000  # Changed from 999 to match the runAsUser
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongodb-pvc
      initContainers:
        - name: fix-permissions
          image: busybox
          command: ["sh", "-c", "chown -R 1000:1000 /data/db && chmod -R 0700 /data/db"]
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
        - name: init-mongo
          image: mongo:latest
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          command:
            - bash
            - -c
            - |
              set -e
              echo "Starting mongod for initialization..."
              mkdir -p /data/db
              # Skip initialization if already done
              if [ -f /data/db/initialized ]; then
                echo "Database already initialized. Exiting init container."
                exit 0
              fi
              mongod --dbpath /data/db --logpath /tmp/mongod.log --bind_ip_all --fork
              echo "Waiting for MongoDB to start..."
              until mongosh --quiet --eval "db.runCommand({ ping: 1 })" >/dev/null 2>&1; do
                echo "MongoDB is not ready, waiting..."
                sleep 2
              done
              echo "MongoDB is ready!"
              echo "Creating admin user..."
              mongosh --eval "db.createUser({ user: '$MONGO_INITDB_ROOT_USERNAME', pwd: '$MONGO_INITDB_ROOT_PASSWORD', roles: [{ role: 'root', db: 'admin' }] })" admin || true
              echo "Creating ead_2024 database user..."
              mongosh --eval "db = db.getSiblingDB('ead_2024'); db.createUser({ user: 'admin', pwd: '$MONGO_INITDB_ROOT_PASSWORD', roles: [{ role: 'dbOwner', db: 'ead_2024' }] })" admin || true
              echo "Shutting down mongod..."
              mongosh --eval "db.shutdownServer()" admin || true
              # Mark the database as initialized
              touch /data/db/initialized
              echo "Init complete"
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-password
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      containers:
        - name: mongodb
          image: mongo:latest
          command: ["mongod", "--bind_ip_all", "--auth"]
          ports:
            - containerPort: 27017
          resources:
            requests:
              cpu: "500m"  # Increased from 100m
              memory: "512Mi"  # Increased from 128Mi
            limits:
              cpu: "1000m"  # Increased from 200m
              memory: "1Gi"  # Increased from 256Mi
          env:
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-database
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          livenessProbe:
            exec:
              command: ["mongosh", "--eval", "db.adminCommand('ping')"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["mongosh", "--eval", "db.adminCommand('ping')"]
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  type: ClusterIP