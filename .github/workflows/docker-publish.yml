name: Build and Publish Docker Image with Jib

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  IMAGE_NAME: receipt-backend
  DOCKER_REGISTRY: docker.io
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for git plugin

      # Step 2: Get short SHA
      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Step 3: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 4: Build and test
      - name: Build and test
        run: mvn clean compile test

      # --- Static Code Analysis and Security Scanning Stages ---

      # Step 5: Run SonarQube Analysis
      # Requires SONAR_HOST_URL and SONAR_TOKEN secrets
      - name: Run SonarQube Analysis
        if: env.SONAR_TOKEN != null && env.SONAR_HOST_URL != null # Only run if secrets are provided
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey='venkatTUD_backend-ca2' \
            -Dsonar.organization='venkattud'
        env: # Set SonarQube specific environment variables
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }} # Needed for GitHub integration (e.g., PR decoration)
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 6: Run OWASP Dependency Check (Optional but Recommended)
      # Scans project dependencies for known vulnerabilities
      - name: Run OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check

      # Step 7: Package and publish Docker image with Jib
      - name: Package and publish Docker image with Jib
        run: |
          echo "Building image with tag: latest and ${{ env.SHORT_SHA }}"
          mvn package jib:build -DskipTests \
            -Dmongodb.url="${{ secrets.MONGO_DB_URL }}" \
            -Dmongodb.dbname="${{ secrets.MONGO_DB_NAME }}" \
            -Dmongodb.collection="${{ secrets.MONGO_DB_COLLECTION }}"
        env:
          DOCKERHUB_USERID: ${{ secrets.DOCKERHUB_USERID }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          MONGO_DB_URL: ${{ secrets.MONGO_DB_URL }}         # MongoDB URL secret
          MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}       # MongoDB Database secret
          MONGO_DB_COLLECTION: ${{ secrets.MONGO_DB_COLLECTION }}  # MongoDB Collection secret

      # Step 8: Scan container for vulnerabilities
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          token-setup-trivy: ${{ secrets.REPO_TOKEN }}


