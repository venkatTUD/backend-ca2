name: Build and Deploy to DigitalOcean Kubernetes

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  IMAGE_NAME: receipt-backend
  DOCKER_REGISTRY: docker.io
  SONAR_HOST_URL: https://sonarcloud.io
  DO_CLUSTER_NAME: receipt-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      deployments: write
      security-events: write  # Required for SARIF upload

    steps:
      # --- Initial Setup ---
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # --- Java Environment ---
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # --- Build and Test ---
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and test
        run: mvn clean compile test

      # --- Security Scanning ---
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=venkatTUD_backend-ca2 \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      # Package and publish Docker image with Jib
      - name: Build and push with Jib
        run: |
          mvn package jib:build -DskipTests \
            -Djib.to.auth.username=${{ secrets.DOCKERHUB_USERID }} \
            -Djib.to.auth.password=${{ secrets.DOCKERHUB_TOKEN }} \
            -Dmongodb.url="${{ secrets.MONGO_DB_URL }}" \
            -Dmongodb.dbname="${{ secrets.MONGO_DB_NAME }}" \
            -Dmongodb.collection="${{ secrets.MONGO_DB_COLLECTION }}"
        env:
          DOCKERHUB_USERID: ${{ secrets.DOCKERHUB_USERID }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Container Security Scan ---
      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
        continue-on-error: true

      # - name: Upload Trivy Results
      #   uses: github/codeql-action/upload-sarif@v3  # Updated to v3
      #   with:
      #     sarif_file: trivy-results.sarif
      #     category: trivy-scan  # Added for better organization

      # --- Kubernetes Deployment ---
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save ${{ env.DO_CLUSTER_NAME }}

      # --- Secret Management (Preserved envsubst with masking) ---
      - name: Mask secrets in logs
        run: |
          echo "::add-mask::${{ secrets.MONGO_DB_URL }}"
          echo "::add-mask::${{ secrets.MONGO_DB_PASSWORD }}"

      - name: Update MongoDB secret
        env:
            MONGODB_URI: ${{ secrets.MONGO_DB_URL }}
            MONGODB_DATABASE: ${{ secrets.MONGO_DB_NAME }}
            MONGODB_USERNAME: ${{ secrets.MONGO_DB_USERNAME }}
            MONGODB_PASSWORD: ${{ secrets.MONGO_DB_PASSWORD }}
        run: |
            envsubst < kubernetes/secret.yaml | kubectl apply -f -
            kubectl get secret mongodb-secret -o jsonpath='{.data}' | jq 'del(.uri, .password)'
            # ENSURE there is NO line below this that is just '-'
            # or starts with '-' in a way that would cause this error.

      - name: Deploy MongoDB
        run: |
            kubectl apply -f kubernetes/mongodb-deployment.yaml
            kubectl wait --for=condition=available deployment/mongodb --timeout=300s
  
      - name: Deploy Application # <--- Modify this step back
          # Remove the 'env' block for RECEIPT_BACKEND_IMAGE_TAG
        run: |
            # Simply apply the deployment YAML directly
            kubectl apply -f kubernetes/deployment.yaml
            # Apply the service separately
            kubectl apply -f kubernetes/service.yaml
  
            # Trigger a rolling restart (this will pull the image tagged ':latest')
            kubectl rollout restart deployment/receipt-backend
            # Wait for the deployment to become available
            kubectl wait --for=condition=available deployment/receipt-backend --timeout=300s
  
  

      # --- Verification ---
      - name: Verify Deployment
        run: |
          kubectl get svc -n default
          kubectl get pods -n default -o wide
