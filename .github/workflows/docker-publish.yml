name: Build and Deploy to DigitalOcean Kubernetes

on:
  push:
       branches: ["main"]
  pull_request:
       branches: ["main"]
  workflow_dispatch:

env:
     IMAGE_NAME: receipt-backend
     DOCKER_REGISTRY: docker.io
     SONAR_HOST_URL: https://sonarcloud.io
     DO_CLUSTER_NAME: receipt-cluster
     MONGODB_URI: ${{ secrets.MONGODB_URI }}
     MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
     MONGODB_COLLECTION: ${{ secrets.MONGODB_COLLECTION }}
     MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
     MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}

jobs:
     build-and-deploy:
       runs-on: ubuntu-latest
       permissions:
         contents: read
         packages: write
         deployments: write
         security-events: write

       steps:
         - name: Checkout repository
           uses: actions/checkout@v3
           with:
             fetch-depth: 0

         - name: Get short SHA
           id: sha
           run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

         - name: Set up JDK 17
           uses: actions/setup-java@v3
           with:
             java-version: '17'
             distribution: 'temurin'
             cache: maven

         - name: Cache Maven packages
           uses: actions/cache@v4
           with:
             path: ~/.m2
             key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
             restore-keys: ${{ runner.os }}-m2

         - name: Build and test
           run: mvn clean compile test

         - name: SonarQube Analysis
           env:
             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
           run: |
             mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
               -Dsonar.projectKey=venkatTUD_backend-ca2 \
               -Dsonar.java.coveragePlugin=jacoco \
               -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

         - name: OWASP Dependency Check
           run: mvn org.owasp:dependency-check-maven:check
           env:
             NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

         - name: Build and push with Jib
           run: |
             mvn package jib:build -DskipTests \
               -Djib.to.auth.username=${{ secrets.DOCKERHUB_USERID }} \
               -Djib.to.auth.password=${{ secrets.DOCKERHUB_TOKEN }}
           env:
             DOCKERHUB_USERID: ${{ secrets.DOCKERHUB_USERID }}
             DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

         - name: Trivy Vulnerability Scan
           uses: aquasecurity/trivy-action@master
           with:
             image-ref: ${{ env.DOCKER_REGISTRY }}/venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
             format: 'sarif'
             output: 'trivy-results.sarif'
             severity: 'CRITICAL,HIGH'
             ignore-unfixed: true
             exit-code: '1'
           continue-on-error: true

         - name: Install doctl
           uses: digitalocean/action-doctl@v2
           with:
             token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

         - name: Configure kubectl
           run: doctl kubernetes cluster kubeconfig save ${{ env.DO_CLUSTER_NAME }}

         - name: Update MongoDB secret
           env:
             MONGODB_URI: ${{ secrets.MONGODB_URI }}
             MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
             MONGODB_COLLECTION: ${{ secrets.MONGODB_COLLECTION }}
             MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
             MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
           run: |
             envsubst < kubernetes/secret.yaml | kubectl apply -f -
             kubectl get secret mongodb-secret -o jsonpath='{.data}' | jq 'del(.MONGODB_URI, .MONGODB_PASSWORD)'

         - name: Deploy MongoDB
           run: |
             kubectl apply -f kubernetes/mongodb-deployment.yaml
             kubectl wait --for=condition=available deployment/mongodb --timeout=300s

         - name: Deploy Application
           run: |
             kubectl apply -f kubernetes/deployment.yaml
             kubectl apply -f kubernetes/service.yaml
             kubectl rollout restart deployment/receipt-backend
             kubectl wait --for=condition=available deployment/receipt-backend --timeout=300s

         - name: Verify Deployment
           run: |
             kubectl get svc -n default
             kubectl get pods -n default -o wide