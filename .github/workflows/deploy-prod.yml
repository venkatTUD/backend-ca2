name: Deploy Backend to Prod
on:
  push:
    branches: ["release"]
  workflow_dispatch:
env:
  IMAGE_NAME: receipt-backend
  DOCKER_REGISTRY: docker.io
  GKE_CLUSTER_NAME: receipt-prod-cluster
  GKE_REGION: us-central1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      deployments: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and test
        run: mvn clean compile test

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=venkatTUD_backend-ca2 \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      - name: Build and push with Jib
        run: |
          mvn package jib:build -DskipTests \
            -Djib.to.auth.username=${{ secrets.DOCKERHUB_USERID }} \
            -Djib.to.auth.password=${{ secrets.DOCKERHUB_TOKEN }} \
            -Djib.to.image=docker.io/venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
        env:
          DOCKERHUB_USERID: ${{ secrets.DOCKERHUB_USERID }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
        continue-on-error: true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: eadtud
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure kubectl for Prod
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GKE_REGION

          - name: Prepare Production Environment
          run: |
            # Create namespace and label in one command
            kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -
            kubectl label namespace prod environment=production --overwrite
        
            # Create secret template file
            cat > secret-template.yaml << 'EOL'
            apiVersion: v1
            kind: Secret
            metadata:
              name: mongodb-secret
              namespace: prod
            type: Opaque
            stringData:
              mongodb-username: ${MONGO_USERNAME}
              mongodb-password: ${MONGO_PASSWORD}
              mongodb-uri: ${MONGO_URI}
              mongodb-database: ${MONGO_DATABASE}
              mongodb-collection: ${MONGO_COLLECTION}
            EOL
        
            # Substitute variables and apply
            envsubst < secret-template.yaml | kubectl apply -f -
          env:
            MONGO_USERNAME: ${{ secrets.MONGODB_USERNAME_PROD }}
            MONGO_PASSWORD: ${{ secrets.MONGODB_PASSWORD_PROD }}
            MONGO_URI: ${{ secrets.MONGODB_URI_PROD }}
            MONGO_DATABASE: ${{ secrets.MONGODB_DATABASE_PROD }}
            MONGO_COLLECTION: ${{ secrets.MONGODB_COLLECTION_PROD }}

      - name: Deploy to Prod
        run: |
          cd k8s/overlays/prod
          kustomize edit set image docker.io/venkatakurathitud/receipt-backend=docker.io/venkatakurathitud/receipt-backend:${{ env.SHORT_SHA }}
          kubectl apply -k .

      - name: Verify Deployment
        run: |
          kubectl -n prod get pods,svc,deployments.apps,secrets -o wide
          kubectl -n prod wait --for=condition=available deployment/receipt-backend --timeout=300s
          kubectl -n prod wait --for=condition=available deployment/mongodb --timeout=300s