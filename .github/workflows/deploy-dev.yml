name: Deploy Backend to dev

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: receipt-backend
  DOCKER_REGISTRY: docker.io
  GKE_CLUSTER_NAME: receipt-cluster
  GKE_REGION: us-central1
  # Define kustomize directory path
  KUSTOMIZE_DEV_DIR: k8s/overlays/dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      deployments: write
      security-events: write
      id-token: write # Required for google-github-actions/auth@v1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and test
        run: mvn clean compile test

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=venkatTUD_backend-ca2 \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }}
        # Add conditional execution for PRs if desired
        # if: github.event_name == 'pull_request'


      - name: OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        # Check for vulnerabilities; you might want to fail the job if critical ones are found
        # run: mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=11 # Example to fail on high/critical

      - name: Build and push with Jib
        run: |
          # Ensure the image name matches the one expected by Kustomize
          mvn package jib:build -DskipTests \
            -Djib.to.auth.username=${{ secrets.DOCKERHUB_USERID }} \
            -Djib.to.auth.password=${{ secrets.DOCKERHUB_TOKEN }} \
            -Djib.to.image=${{ env.DOCKER_REGISTRY }}/venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
        env:
          DOCKERHUB_USERID: ${{ secrets.DOCKERHUB_USERID }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1' # Fail the job if critical/high vulns are found (adjust as per policy)
        continue-on-error: true # Set to false if you want the job to fail

      # Upload Trivy results to GitHub Security tab
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true # Allow deployment even if SARIF upload fails

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: eadtud
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure kubectl for dev
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GKE_REGION

      - name: Prepare Production Environment (Create Namespace and Secret)
        run: |
          # Create namespace and label if they don't exist
          kubectl create namespace default --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace default environment=dev --overwrite

          # --- Manual Secret Creation ---
          # This step creates the secret outside of Kustomization
          # It's necessary because Kustomization's secretGenerator doesn't substitute env vars
          cat > secret-template.yaml << 'EOL'
          apiVersion: v1
          kind: Secret
          metadata:
            name: mongodb-secret
            namespace: default # Ensure namespace matches deployment
          type: Opaque
          stringData:
            mongodb-username: ${MONGO_USERNAME}
            mongodb-password: ${MONGO_PASSWORD}
            mongodb-uri: ${MONGO_URI}
            mongodb-database: ${MONGO_DATABASE}
            mongodb-collection: ${MONGO_COLLECTION}
          EOL

          # Substitute variables from GH secrets and apply the secret
          envsubst < secret-template.yaml | kubectl apply -f -
          # --- End Manual Secret Creation ---

        env:
          # Use GitHub Actions secrets for sensitive data
          MONGO_USERNAME: ${{ secrets.MONGODB_USERNAME_DEV}}
          MONGO_PASSWORD: ${{ secrets.MONGODB_PASSWORD_DEV }}
          MONGO_URI: ${{ secrets.MONGODB_URI_DEV }}
          MONGO_DATABASE: ${{ secrets.MONGODB_DATABASE_DEV}}
          MONGO_COLLECTION: ${{ secrets.MONGODB_COLLECTION_DEV }}


      - name: Deploy to Prod using Kustomize
        run: |
          # Navigate to the kustomization directory
          cd ${{ env.KUSTOMIZE_DEV_DIR }}

          # Edit the kustomization.yaml to set the correct image tag
          # This modifies the kustomization.yaml file locally in the runner
          kustomize edit set image docker.io/venkatakurathitud/${{ env.IMAGE_NAME }}=${{ env.DOCKER_REGISTRY }}/venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}

          # Apply the kustomization. This will use the modified file.
          kubectl apply -k .

      - name: Verify Deployment
        run: |
          echo "Verifying deployment in namespace prod..."
          kubectl -n default get pods,svc,deployments.apps,secrets -o wide

          # Wait for the receipt-backend deployment to be ready
          echo "Waiting for receipt-backend deployment to be available..."
          kubectl -n default wait --for=condition=available deployment/receipt-backend --timeout=300s

          # Wait for the mongodb deployment to be ready
          echo "Waiting for mongodb deployment to be available..."
          kubectl -n default wait --for=condition=available deployment/mongodb --timeout=300s

          echo "Deployment verification complete."